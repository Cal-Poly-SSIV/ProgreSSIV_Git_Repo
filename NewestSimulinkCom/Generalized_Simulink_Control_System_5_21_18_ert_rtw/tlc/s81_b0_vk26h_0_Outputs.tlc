%implements s81_b0_vk26h_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

uint8_T rdDataRaw[4];
uint32_T PinNameLoc;
uint8_T status;
MW_SPI_Mode_type ClockModeValue;
MW_SPI_FirstBitTransfer_Type MsbFirstTransferLoc;
%closefile localVarDecl
%<SLibGenerateExtModeOutput(system)>
/* Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
PinNameLoc = SPI0_CE1;
MW_SPI_SetSlaveSelect(localDW->e2a5ozwqf2.MW_SPI_HANDLE, PinNameLoc, true);
ClockModeValue = MW_SPI_MODE_0;
MsbFirstTransferLoc = MW_SPI_MOST_SIGNIFICANT_BIT_FIRST;
status = MW_SPI_SetFormat(localDW->e2a5ozwqf2.MW_SPI_HANDLE, 8, ClockModeValue, MsbFirstTransferLoc);
if (!(status != 0)) {
    MW_SPI_MasterWriteRead_8bits(localDW->e2a5ozwqf2.MW_SPI_HANDLE, hqx0x1bw1i, rdDataRaw, 4U);
}
memcpy((void *)&localB->mbm5jwtrtx[0], (void *)&rdDataRaw[0], (uint32_T)((size_t)4 * sizeof(uint8_T)));
/* End of Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 5, 0)>
%endif
%if SLibCG_ArgAccessed(0, 5, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 5, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void podjxd54gr(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 5, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%<comma>const uint8_T hqx0x1bw1i[4]\
%assign comma = ", "
%<comma>pj1mow4i3i *localB\
%assign comma = ", "
%<comma>masv35lgnd *localDW\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%endfunction
