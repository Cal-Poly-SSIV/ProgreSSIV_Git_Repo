%implements s81_b0_vk26h_0_Functions "C"

%function fpm4xjanrx_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
obj->matlabCodegenIsDeleted = value;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("fpm4xjanrx", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "fpm4xjanrx"))
%<SLibCG_AccessArg(0, 0, 2)>
%endif
%if SLibCG_ArgAccessed(0, 0, 2)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "fpm4xjanrx", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "fpm4xjanrx"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 0, 2)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void fpm4xjanrx(\
%assign comma = ""
%<comma>nxh1cwezgh *obj\
%assign comma = ", "
%<comma>boolean_T value\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 0, 2)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function grtw3ssnqg_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
uint32_T PinNameLoc;
uint32_T MOSIPinLoc;
uint32_T MISOPinLoc;
uint32_T SCKPinLoc;
/* Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
if ((obj->isInitialized == 1) && obj->isSetupComplete) {
    PinNameLoc = SPI0_CE1;
    MOSIPinLoc = MW_UNDEFINED_VALUE;
    MISOPinLoc = MW_UNDEFINED_VALUE;
    SCKPinLoc = MW_UNDEFINED_VALUE;
    MW_SPI_Close(obj->MW_SPI_HANDLE, MOSIPinLoc, MISOPinLoc, SCKPinLoc, PinNameLoc);
}
/* End of Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("grtw3ssnqg", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "grtw3ssnqg"))
%<SLibCG_AccessArg(0, 1, 1)>
%endif
%if SLibCG_ArgAccessed(0, 1, 1)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "grtw3ssnqg", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "grtw3ssnqg"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 1, 1)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void grtw3ssnqg(\
%assign comma = ""
%<comma>const nxh1cwezgh *obj\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 1, 1)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function ahygjwb0ur_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,2,0,0)
%<SLibCG_AccessArg(0 ,2, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(0,2,0,1)
%<SLibCG_AccessArg(0 ,2, 1)>
%endif

/* Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
%<(SLibCGCallSubFcn("grtw3ssnqg", ["obj", "%<::tSimStruct>"], 0, 2, 0))>;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("ahygjwb0ur", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ahygjwb0ur"))
%<SLibCG_AccessArg(0, 2, 1)>
%endif
%if SLibCG_ArgAccessed(0, 2, 1)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "ahygjwb0ur", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ahygjwb0ur"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 2, 1)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ahygjwb0ur(\
%assign comma = ""
%<comma>const nxh1cwezgh *obj\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 2, 1)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function ekk0yizesa_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,3,1,0)
%<SLibCG_AccessArg(0 ,3, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(0,3,1,1)
%<SLibCG_AccessArg(0 ,3, 1)>
%endif

%if SLibCG_FcnCallArgAccessed(0,3,0,0)
%<SLibCG_AccessArg(0 ,3, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(0,3,0,2)
%<SLibCG_AccessArg(0 ,3, 1)>
%endif

/* Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
if (!obj->matlabCodegenIsDeleted) {
    %<(SLibCGCallSubFcn("fpm4xjanrx", ["obj", "true", "%<::tSimStruct>"], 0, 3, 0))>;
    %<(SLibCGCallSubFcn("ahygjwb0ur", ["obj", "%<::tSimStruct>"], 0, 3, 1))>;
}
/* End of Start for MATLABSystem: '<S3>/SPI Master Transfer Read radio_steering' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("ekk0yizesa", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ekk0yizesa"))
%<SLibCG_AccessArg(0, 3, 1)>
%endif
%if SLibCG_ArgAccessed(0, 3, 1)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "ekk0yizesa", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ekk0yizesa"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 3, 1)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ekk0yizesa(\
%assign comma = ""
%<comma>nxh1cwezgh *obj\
%assign comma = ", "
%if SLibCG_ArgAccessed(0, 3, 1)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%return fcnBuff
%endfunction

